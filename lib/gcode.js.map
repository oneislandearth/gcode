{"version":3,"sources":["../src/gcode.js"],"names":["GCode","constructor","name","start","finish","unit","positioning","feedrate","clearance","lines","code","line","toUpperCase","Math","random","toFixed","slice","toLowercase","state","initialize","add","opCode","setPositioning","toggleState","raiseMill","feedRapid","String","toLowerCase","Number","scale","number","positionCode","position","positions","Array","isArray","x","y","z","undefined","push","join","opt","feedrateCode","dropMill","depth","startSpindle","clockwise","stopSpindle","startCoolant","flood","stopCoolant","motion","feedLinear","terminate","force","charAt","eval","toString"],"mappings":"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","sourcesContent":["// Generate GCode instructions\nexport class GCode {\n\n  // Create an instance of GCode\n  constructor({ name, start, finish, unit, positioning, feedrate, clearance, lines }) {\n\n    // Define the code blocks\n    this.code = [];\n\n    // Define the current line number (disables if lines are set to off)\n    this.line = (lines == false) ? 0 : 1;\n\n    // Define the name of the code (random three number name if unset)\n    this.name = (name) ? name.toUpperCase() : `00${(Math.random() * 1000).toFixed(0)}`.slice(-3);\n\n    // Define the unit to use (default is cm)\n    this.unit = (unit) ? unit.toLowercase() : 'cm';\n\n    // Define the positioning to use (absolute by default)\n    this.positioning = (positioning) ? positioning : 0;\n\n    // Define the clearance (10cm default)\n    this.clearance = (clearance) ? clearance : 10;\n\n    // Define the feedrate (50cm / minute)\n    this.feedrate = (feedrate) ? feedrate : 50;\n\n    // Define the start position (clearance unscaled here)\n    this.start = (start) ? start : [0, 0, clearance];\n\n    // Define the finish position (clearance unscaled here)\n    this.finish = (finish) ? finish : [0, 0, clearance];\n\n    // Define the state [0 off, 1 running]\n    this.state = 0;\n\n    // Startup now that all the variables are configured\n    this.initialize();\n  }\n\n  // Startup the code and make the first moves\n  initialize() {\n\n    // Add an opening tag to the code\n    this.add(`%`);\n\n    // Add the script name\n    this.add(this.opCode(`O`, this.name));\n\n    // Add code for which unit system to use (mm or inches)\n    this.add(this.opCode(`G`, (this.unit == 'inch' || this.unit == 'in') ? '20' : '21'));\n\n    // Add code for the type of positioning being used\n    this.setPositioning(this.positioning);\n\n    // Set the state to on\n    this.toggleState();\n\n    // Raise the mill above the clearance\n    this.raiseMill();\n\n    // Feed rapidly to the start position\n    this.feedRapid(this.start, this.feedrate);\n  }\n\n  // Applying the positioning (absolute or relative)\n  setPositioning(positioning) {\n\n    // Convert the value to a lowercase string\n    positioning = String(positioning).toLowerCase();\n\n    // Evaluate to either 0 (absolute) or 1 (relative)\n    positioning = (positioning == 'absolute') ? 0 : (positioning == 'relative') ? 1 : Number(positioning);\n\n    // Add the positioning code\n    this.add(this.opCode(`G`, ((positioning) ? `90` : `91`)));\n  }\n\n  // Apply the scale based on the units\n  scale(number) {\n\n    // Scale the number in centimeters\n    if (this.unit == 'cm') return (number * 10);\n\n    // Scale the number in decimeters\n    if (this.unit == 'dm') return (number * 100);\n\n    // Scale the number in meters\n    if (this.unit == 'm') return (number * 1000);\n\n    // Return the number as scale is mm or inches\n    return number;\n  }\n\n  // Derive the coordinate words from a position { x, y, z } or [ x, y, z ]\n  positionCode(position = [0, 0, 0]) {\n\n    // Create a list of positions\n    const positions = [];\n\n    // Check if the position is a standard matrix [x, y, z] and convert to an object\n    if (Array.isArray(position)) position = { x: position[0], y: position[1], z: position[2] };\n\n    // If there is an x coordinate then add it to the positions\n    if (position.x !== undefined) positions.push(`X${this.scale(position.x)}`);\n\n    // If there is an y coordinate then add it to the positions\n    if (position.y !== undefined) positions.push(`Y${this.scale(position.y)}`);\n\n    // If there is an z coordinate then add it to the positions\n    if (position.z !== undefined) positions.push(`Z${this.scale(position.z)}`);\n\n    // Return the position words\n    return positions.join(` `);\n  }\n\n  // Optcode\n  opCode(opt, code) {\n\n    // Return the optcode (e.g.)\n    return (`${opt}${code}`);\n  }\n\n  // Derive the feedrate word from a feedrate (mm/minute)\n  feedrateCode(feedrate = 50) {\n\n    // Return the feedrate word\n    return this.opCode(`F`, this.scale(feedrate));\n  }\n\n  // Drop the mill to a specified depth (0 by default)\n  dropMill(depth = 0) {\n\n    // Add the code to drop the mill\n    this.feedRapid({ z: depth });\n  }\n\n  // Raise the mill to a specified depth (clearence value by default)\n  raiseMill(depth = this.clearance) {\n\n    // Add the code to raise the mill\n    this.feedRapid({ z: depth });\n  }\n\n  // Start the spindle in a direction (clockwise by default)\n  startSpindle(clockwise = true) {\n\n    // Add the code to the stack to start the spindle in a specified direction\n    this.add(this.opCode(`M`, ((clockwise) ? `03` : `04`)));\n  }\n\n  // Stop the spindle\n  stopSpindle() {\n\n    // Add the code to the stack to stop the spindle\n    this.add(this.opCode(`M`, `05`));\n  }\n\n  // Start the coolant with a certain intensity (false by default)\n  startCoolant(flood = false) {\n\n    // Add the code to the stack to start the coolant\n    this.add(this.opCode(`M`, ((flood) ? `08` : `07`)));\n  }\n  \n  // Stop the coolant\n  stopCoolant() {\n  \n    // Add the code to the stack to stop the coolant\n    this.add(this.opCode(`M`, `09`));\n  }\n\n  // Motion in a specified way towards a point\n  motion(code, position, feedrate) {\n\n    // Add the code to the stack to feed to the specified position\n    this.add(`${this.opCode(`G`, code)} ${this.positionCode(position)} ${this.feedrateCode(feedrate)}`);\n  }\n\n  // Feed rapidly to a position at a specified feedrate\n  feedRapid(position, feedrate) {\n\n    // Add the code to feed rapidly to the position\n    this.motion(`00`, position, feedrate);\n  }\n\n  // Feed linearly to a position at a specified feedrate\n  feedLinear(position, feedrate) {\n\n    // Add the code to the stack to linearly to the specified position\n    this.motion(`01`, position, feedrate);\n  }\n\n  // Terminate our code and ensure everything is stopped\n  terminate(force = false) {\n\n    // Check that the code is not force stopping\n    if (!force) {\n\n      // Stop the spindle\n      this.stopSpindle();\n\n      // Stop the coolant\n      this.stopCoolant();\n\n      // Raise the mill above the clearence\n      this.raiseMill();\n    }\n\n    // Force stop or rewind the program\n    this.add(this.opCode(`M`, (force) ? `00` : `30`));\n\n    // Toggle the state to off\n    this.toggleState();\n  }\n\n  // Toggle the current state\n  toggleState() {\n\n    // Update the state to the opposite of what it is currently\n    this.state = !this.state;\n  }\n\n  // Add the code to the stack\n  add(code) {\n    \n    // Deterimine whether to add a line number or not\n    if (this.line && (code.charAt(0) != (`%`) && code.charAt(0) != `O`)) {\n    \n      // Add a line number before the section\n      code = `${this.opCode(`N`, `00${this.line}`.slice(-3))} ${code}`;\n\n      // Increment the line count\n      this.line++;\n    }\n\n    // Add the code specified to the code stack\n    this.code.push(code);\n  }\n\n  // Evaluate the gcode\n  eval() {\n\n    // Check if the code has been terminate, and if not then terminate\n    if (this.state == 1) this.terminate();\n\n    // Add the closing tag\n    this.add(`%`);\n\n    // Return the code as a string\n    return this.code.join(`\\n`);\n  }\n\n  // Return the same output as the eval function\n  toString() {\n    return this.eval();\n  }\n}"],"file":"gcode.js"}